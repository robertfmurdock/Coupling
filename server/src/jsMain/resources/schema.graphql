scalar ContributionId
scalar DateTimeISO
scalar Duration
scalar Email
scalar PairAssignmentDocumentId
scalar PartyId
scalar PinId
scalar PlayerId
scalar SecretId
scalar UserId

type PartyDetails {
    id: PartyId!
    name: String
    email: String
    pairingRule: Int
    badgesEnabled: Boolean
    defaultBadgeName: String!
    alternateBadgeName: String!
    callSignsEnabled: Boolean
    animationsEnabled: Boolean
    animationSpeed: Float
    modifyingUserEmail: Email
    timestamp: DateTimeISO
    isDeleted: Boolean
}

type PartyIntegration {
    slackTeam: String
    slackChannel: String
    modifyingUserEmail: Email
    timestamp: DateTimeISO!
    isDeleted: Boolean!
}

type User {
    id: UserId!
    details: UserDetails
    boost: BoostDetails
}

type UserDetails {
    id: UserId!
    email: Email!
    authorizedPartyIds: [PartyId!]!
}

type Pin {
    id: PinId!
    icon: String
    name: String
}

type PinDetails {
    id: PinId!
    partyId: PartyId!
    icon: String!
    name: String!
    modifyingUserEmail: Email
    timestamp: DateTimeISO!
    isDeleted: Boolean!
}

type PlayerDetails {
    id: PlayerId!
    partyId: PartyId!
    name: String!
    email: String!
    badge: Badge!
    callSignAdjective: String!
    callSignNoun: String!
    imageURL: String
    avatarType: AvatarType
    unvalidatedEmails: [String]!
    modifyingUserEmail: Email
    timestamp: DateTimeISO!
    isDeleted: Boolean!
}

enum Badge {
    Default,
    Alternate
}

enum AvatarType {
    Retro,
    RobohashSet1,
    RobohashSet2,
    RobohashSet3,
    RobohashSet4,
    RobohashSet5,
    Multiavatar,
    DicebearPixelArt,
    DicebearAdventurer,
    DicebearCroodles,
    DicebearThumbs,
    DicebearLorelei,
}

type PinnedPlayer {
    id: PlayerId!
    name: String!
    email: String!
    badge: Badge!
    avatarType: AvatarType
    callSignAdjective: String!
    callSignNoun: String!
    imageURL: String
    pins: [Pin!]!
    unvalidatedEmails: [String]
}

type PinnedPair {
    players: [PinnedPlayer!]!
    pins: [Pin!]!
}

type PairAssignmentDocumentDetails {
    id: PairAssignmentDocumentId!
    partyId: PartyId!
    date: DateTimeISO!
    pairs: [PinnedPair!]!
    discordMessageId: String
    slackMessageId: String
    modifyingUserEmail: Email
    timestamp: DateTimeISO!
    isDeleted: Boolean!
}

type PartySecret {
    id: SecretId!
    partyId: PartyId!
    description: String!
    createdTimestamp: DateTimeISO!
    lastUsedTimestamp: DateTimeISO
    modifyingUserEmail: Email
    timestamp: DateTimeISO!
    isDeleted: Boolean!
}

type BoostDetails {
    userId: UserId!
    partyIds: [PartyId!]!
    expirationDate: DateTimeISO!
    modifyingUserEmail: Email
    timestamp: DateTimeISO!
    isDeleted: Boolean!
}

type Contribution {
    commitCount: Int
    createdAt: DateTimeISO!
    cycleTime: Duration
    dateTime: DateTimeISO
    ease: Int
    firstCommit: String
    firstCommitDateTime: DateTimeISO
    hash: String
    id: ContributionId!
    integrationDateTime: DateTimeISO
    label: String
    link: String
    name: String
    participantEmails: [String!]!
    partyId: PartyId!
    semver: String
    story: String
    modifyingUserEmail: Email
    timestamp: DateTimeISO!
    isDeleted: Boolean!
}

type Party {
    id: PartyId!
    accessType: AccessType!
    details: PartyDetails
    integration: PartyIntegration
    pinList: [PinDetails!]
    playerList: [PlayerDetails!]
    retiredPlayers: [PlayerDetails!]
    pairs(input: PairsInput): [Pair!]
    pairAssignmentDocumentList: [PairAssignmentDocumentDetails!]
    secretList: [PartySecret!]
    currentPairAssignmentDocument: PairAssignmentDocumentDetails
    spinsUntilFullRotation: Int
    medianSpinDuration: Duration
    boost: BoostDetails
    contributionReport(input: ContributionsInput): ContributionReport
    pair(input: PairInput) : Pair
}

enum AccessType {
    Owner, Player
}

type Contributor {
    email: String
    playerId: PlayerId
}

input PairInput {
    playerIdList: [PlayerId!]!
}

input PairsInput {
    includeRetired: Boolean
}

input ContributionsInput {
    limit: Int
    window: ContributionWindow
}

enum ContributionWindow {
    All, Year, HalfYear, Quarter, Month, Week
}

input PlayerInput {
    id: PlayerId!
    name: String
    email: String
    badge: String
    callSignAdjective: String
    callSignNoun: String
    imageURL: String
    avatarType: String
}

input PinInput {
    id: PinId!
    icon: String
    name: String
}

input SpinInput {
    partyId: PartyId!
    playerIds: [PlayerId!]!
    pinIds: [PinId!]!
}

type SpinOutput {
    result: PairAssignmentDocumentDetails!
}

input DeletePartyInput {
    partyId: PartyId!
}
input DeletePinInput {
    partyId: PartyId!
    pinId: PinId!
}

input DeletePlayerInput {
    partyId: PartyId!
    playerId: PlayerId!
}

input DeletePairAssignmentsInput {
    partyId: PartyId!
    pairAssignmentsId: PairAssignmentDocumentId!
}

input SavePinInput {
    partyId: PartyId!
    pinId: PinId!
    icon: String!
    name: String!
}

input SaveSlackIntegrationInput {
    partyId: PartyId!
    team: String!
    channel: String!
}

input SavePartyInput {
    partyId: PartyId!
    name: String
    email: String
    pairingRule: Int
    badgesEnabled: Boolean
    defaultBadgeName: String
    alternateBadgeName: String
    callSignsEnabled: Boolean
    animationsEnabled: Boolean
    animationSpeed: Float
}

input SavePlayerInput {
    partyId: PartyId!
    playerId: PlayerId!
    name: String!
    email: String!
    badge: Badge!
    callSignAdjective: String!
    callSignNoun: String!
    imageURL: String
    avatarType: String
    unvalidatedEmails: [String]!
}

input SavePairAssignmentsInput {
    partyId: PartyId!
    pairAssignmentsId: PairAssignmentDocumentId!
    date: DateTimeISO!
    pairs: [PinnedPairInput!]!
    discordMessageId: String
    slackMessageId: String
}

input PinnedPairInput {
    players: [PinnedPlayerInput]!
    pins: [PinInput]!
}

input PinnedPlayerInput {
    id: PlayerId!
    name: String!
    email: String!
    badge: Badge
    callSignAdjective: String!
    callSignNoun: String!
    imageURL: String
    avatarType: AvatarType
    unvalidatedEmails: [String]!
    pins: [PinInput]!
}

type GlobalStats {
    parties: [PartyStats!]!
    totalParties: Int!,
    totalPlayers: Int!,
    totalAppliedPins: Int!,
    totalUniquePins: Int!,
    totalSpins: Int!,
}

type PartyStats {
    name: String!
    id: PartyId!
    playerCount: Int!
    appliedPinCount: Int!
    uniquePinCount: Int!
    spins: Int!
    medianSpinDuration: Duration
    medianSpinDurationMillis: Float
}

type Configuration {
    discordClientId: String
    addToSlackUrl: String
}

input GlobalStatsInput {
    year: Int!
}

input PartyInput {
    partyId: PartyId!
}

type Pair {
    partyId: PartyId
    players: [PlayerDetails!]
    count: Int
    spinsSinceLastPaired: Int
    recentTimesPaired: Int
    contributionReport(input: ContributionsInput): ContributionReport
    pairAssignmentHistory: [PairAssignment!]
}

type ContributionReport {
    partyId: PartyId
    contributions: [Contribution!]
    count: Int
    medianCycleTime: Duration
    withCycleTimeCount: Int
    contributors: [Contributor!]
}

type PairAssignment {
    playerIds: [PlayerId!]
    documentId: PairAssignmentDocumentId
    details: PairAssignmentDocumentDetails
    date: DateTimeISO
    allPairs: [PinnedPair]
    recentTimesPaired: Int
}

"""
All Queries and Mutations are subject to change. If you want to program an integration that depends on the Graph being stable, please open an issue on the [the github page](https://www.github.com/robertfmurdock/coupling), so we can plan accordingly. :)
"""
type Query {
    partyList: [Party!]
    party(input: PartyInput!): Party
    user: User
    globalStats(input: GlobalStatsInput!) : GlobalStats
    config: Configuration
}

"""
All Queries and Mutations are subject to change. If you want to program an integration that depends on the Graph being stable, please open an issue on the [the github page](https://www.github.com/robertfmurdock/coupling), so we can plan accordingly. :)
"""
type Mutation {
    spin(input: SpinInput!): Boolean
    saveParty(input: SavePartyInput!): Boolean
    deleteParty(input: DeletePartyInput!): Boolean
    saveSlackIntegration(input: SaveSlackIntegrationInput!): Boolean
    savePin(input: SavePinInput!): Boolean
    deletePin(input: DeletePinInput!): Boolean
    savePlayer(input: SavePlayerInput!): Boolean
    deletePlayer(input: DeletePlayerInput!): Boolean
    savePairAssignments(input: SavePairAssignmentsInput!): Boolean
    deletePairAssignments(input: DeletePairAssignmentsInput!): Boolean
    createSecret(input: CreateSecretInput!) : SecretToken
    deleteSecret(input: DeleteSecretInput!) : Boolean
    saveContribution(input: SaveContributionInput!): Boolean
    clearContributions(input: ClearContributionsInput!): Boolean
    grantSlackAccess(input: GrantSlackAccessInput!): Boolean
    grantDiscordAccess(input: GrantDiscordAccessInput!): Boolean
}

input SaveContributionInput {
    partyId: PartyId!
    contributionList: [ContributionInput]!
}

input ContributionInput {
    contributionId: ContributionId!
    hash: String
    dateTime: DateTimeISO
    ease: Int
    story: String
    link: String
    label: String
    semver: String
    firstCommit: String
    firstCommitDateTime: DateTimeISO
    integrationDateTime: DateTimeISO
    cycleTime: Duration
    participantEmails: [String!]!
    name: String
    commitCount: Int
}

input ClearContributionsInput {
    partyId: PartyId!
}

input GrantSlackAccessInput {
    code: String!
    state: String!
}

input GrantDiscordAccessInput {
    code: String!
    partyId: PartyId!
    guildId: String!
}

input CreateSecretInput {
    partyId: PartyId!
    description: String!
}

type SecretToken {
    secretId: SecretId!
    description: String!,
    createdTimestamp: DateTimeISO!
    lastUsedTimestamp: DateTimeISO
    secretToken: String!
}

input DeleteSecretInput {
    partyId: PartyId!
    secretId: SecretId!
}
